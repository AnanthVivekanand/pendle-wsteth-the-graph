// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get spender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Burn extends ethereum.Event {
  get params(): Burn__Params {
    return new Burn__Params(this);
  }
}

export class Burn__Params {
  _event: Burn;

  constructor(event: Burn) {
    this._event = event;
  }

  get receiverSy(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get receiverPt(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get netLpBurned(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get netSyOut(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get netPtOut(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class IncreaseObservationCardinalityNext extends ethereum.Event {
  get params(): IncreaseObservationCardinalityNext__Params {
    return new IncreaseObservationCardinalityNext__Params(this);
  }
}

export class IncreaseObservationCardinalityNext__Params {
  _event: IncreaseObservationCardinalityNext;

  constructor(event: IncreaseObservationCardinalityNext) {
    this._event = event;
  }

  get observationCardinalityNextOld(): i32 {
    return this._event.parameters[0].value.toI32();
  }

  get observationCardinalityNextNew(): i32 {
    return this._event.parameters[1].value.toI32();
  }
}

export class Mint extends ethereum.Event {
  get params(): Mint__Params {
    return new Mint__Params(this);
  }
}

export class Mint__Params {
  _event: Mint;

  constructor(event: Mint) {
    this._event = event;
  }

  get receiver(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get netLpMinted(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get netSyUsed(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get netPtUsed(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Swap extends ethereum.Event {
  get params(): Swap__Params {
    return new Swap__Params(this);
  }
}

export class Swap__Params {
  _event: Swap;

  constructor(event: Swap) {
    this._event = event;
  }

  get caller(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get receiver(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get netPtOut(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get netSyOut(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get netSyFee(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get netSyToReserve(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class UpdateImpliedRate extends ethereum.Event {
  get params(): UpdateImpliedRate__Params {
    return new UpdateImpliedRate__Params(this);
  }
}

export class UpdateImpliedRate__Params {
  _event: UpdateImpliedRate;

  constructor(event: UpdateImpliedRate) {
    this._event = event;
  }

  get timestamp(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get lnLastImpliedRate(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Contract___storageResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: i32;
  value4: i32;
  value5: i32;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: i32,
    value4: i32,
    value5: i32
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromSignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromSignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set(
      "value3",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value3))
    );
    map.set(
      "value4",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value4))
    );
    map.set(
      "value5",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value5))
    );
    return map;
  }

  getTotalPt(): BigInt {
    return this.value0;
  }

  getTotalSy(): BigInt {
    return this.value1;
  }

  getLastLnImpliedRate(): BigInt {
    return this.value2;
  }

  getObservationIndex(): i32 {
    return this.value3;
  }

  getObservationCardinality(): i32 {
    return this.value4;
  }

  getObservationCardinalityNext(): i32 {
    return this.value5;
  }
}

export class Contract__burnResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getNetSyOut(): BigInt {
    return this.value0;
  }

  getNetPtOut(): BigInt {
    return this.value1;
  }
}

export class Contract__mintResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }

  getNetLpOut(): BigInt {
    return this.value0;
  }

  getNetSyUsed(): BigInt {
    return this.value1;
  }

  getNetPtUsed(): BigInt {
    return this.value2;
  }
}

export class Contract__observationsResult {
  value0: BigInt;
  value1: BigInt;
  value2: boolean;

  constructor(value0: BigInt, value1: BigInt, value2: boolean) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromBoolean(this.value2));
    return map;
  }

  getBlockTimestamp(): BigInt {
    return this.value0;
  }

  getLnImpliedRateCumulative(): BigInt {
    return this.value1;
  }

  getInitialized(): boolean {
    return this.value2;
  }
}

export class Contract__readStateResultMarketStruct extends ethereum.Tuple {
  get totalPt(): BigInt {
    return this[0].toBigInt();
  }

  get totalSy(): BigInt {
    return this[1].toBigInt();
  }

  get totalLp(): BigInt {
    return this[2].toBigInt();
  }

  get treasury(): Address {
    return this[3].toAddress();
  }

  get scalarRoot(): BigInt {
    return this[4].toBigInt();
  }

  get expiry(): BigInt {
    return this[5].toBigInt();
  }

  get lnFeeRateRoot(): BigInt {
    return this[6].toBigInt();
  }

  get reserveFeePercent(): BigInt {
    return this[7].toBigInt();
  }

  get lastLnImpliedRate(): BigInt {
    return this[8].toBigInt();
  }
}

export class Contract__readTokensResult {
  value0: Address;
  value1: Address;
  value2: Address;

  constructor(value0: Address, value1: Address, value2: Address) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    return map;
  }

  get_SY(): Address {
    return this.value0;
  }

  get_PT(): Address {
    return this.value1;
  }

  get_YT(): Address {
    return this.value2;
  }
}

export class Contract__rewardStateResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getIndex(): BigInt {
    return this.value0;
  }

  getLastBalance(): BigInt {
    return this.value1;
  }
}

export class Contract__swapExactPtForSyResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getNetSyOut(): BigInt {
    return this.value0;
  }

  getNetSyFee(): BigInt {
    return this.value1;
  }
}

export class Contract__swapSyForExactPtResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getNetSyIn(): BigInt {
    return this.value0;
  }

  getNetSyFee(): BigInt {
    return this.value1;
  }
}

export class Contract__userRewardResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getIndex(): BigInt {
    return this.value0;
  }

  getAccrued(): BigInt {
    return this.value1;
  }
}

export class Contract extends ethereum.SmartContract {
  static bind(address: Address): Contract {
    return new Contract("Contract", address);
  }

  DOMAIN_SEPARATOR(): Bytes {
    let result = super.call(
      "DOMAIN_SEPARATOR",
      "DOMAIN_SEPARATOR():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_DOMAIN_SEPARATOR(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "DOMAIN_SEPARATOR",
      "DOMAIN_SEPARATOR():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  _storage(): Contract___storageResult {
    let result = super.call(
      "_storage",
      "_storage():(int128,int128,uint96,uint16,uint16,uint16)",
      []
    );

    return new Contract___storageResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toI32(),
      result[4].toI32(),
      result[5].toI32()
    );
  }

  try__storage(): ethereum.CallResult<Contract___storageResult> {
    let result = super.tryCall(
      "_storage",
      "_storage():(int128,int128,uint96,uint16,uint16,uint16)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Contract___storageResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toI32(),
        value[4].toI32(),
        value[5].toI32()
      )
    );
  }

  activeBalance(param0: Address): BigInt {
    let result = super.call(
      "activeBalance",
      "activeBalance(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_activeBalance(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "activeBalance",
      "activeBalance(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  allowance(owner: Address, spender: Address): BigInt {
    let result = super.call(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );

    return result[0].toBigInt();
  }

  try_allowance(owner: Address, spender: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  approve(spender: Address, amount: BigInt): boolean {
    let result = super.call("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_approve(spender: Address, amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  balanceOf(account: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  burn(
    receiverSy: Address,
    receiverPt: Address,
    netLpToBurn: BigInt
  ): Contract__burnResult {
    let result = super.call(
      "burn",
      "burn(address,address,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(receiverSy),
        ethereum.Value.fromAddress(receiverPt),
        ethereum.Value.fromUnsignedBigInt(netLpToBurn)
      ]
    );

    return new Contract__burnResult(result[0].toBigInt(), result[1].toBigInt());
  }

  try_burn(
    receiverSy: Address,
    receiverPt: Address,
    netLpToBurn: BigInt
  ): ethereum.CallResult<Contract__burnResult> {
    let result = super.tryCall(
      "burn",
      "burn(address,address,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(receiverSy),
        ethereum.Value.fromAddress(receiverPt),
        ethereum.Value.fromUnsignedBigInt(netLpToBurn)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Contract__burnResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  decimals(): i32 {
    let result = super.call("decimals", "decimals():(uint8)", []);

    return result[0].toI32();
  }

  try_decimals(): ethereum.CallResult<i32> {
    let result = super.tryCall("decimals", "decimals():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  expiry(): BigInt {
    let result = super.call("expiry", "expiry():(uint256)", []);

    return result[0].toBigInt();
  }

  try_expiry(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("expiry", "expiry():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  factory(): Address {
    let result = super.call("factory", "factory():(address)", []);

    return result[0].toAddress();
  }

  try_factory(): ethereum.CallResult<Address> {
    let result = super.tryCall("factory", "factory():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getRewardTokens(): Array<Address> {
    let result = super.call(
      "getRewardTokens",
      "getRewardTokens():(address[])",
      []
    );

    return result[0].toAddressArray();
  }

  try_getRewardTokens(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getRewardTokens",
      "getRewardTokens():(address[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  initialAnchor(): BigInt {
    let result = super.call("initialAnchor", "initialAnchor():(int256)", []);

    return result[0].toBigInt();
  }

  try_initialAnchor(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("initialAnchor", "initialAnchor():(int256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isExpired(): boolean {
    let result = super.call("isExpired", "isExpired():(bool)", []);

    return result[0].toBoolean();
  }

  try_isExpired(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isExpired", "isExpired():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  lastRewardBlock(): BigInt {
    let result = super.call(
      "lastRewardBlock",
      "lastRewardBlock():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_lastRewardBlock(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lastRewardBlock",
      "lastRewardBlock():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  mint(
    receiver: Address,
    netSyDesired: BigInt,
    netPtDesired: BigInt
  ): Contract__mintResult {
    let result = super.call(
      "mint",
      "mint(address,uint256,uint256):(uint256,uint256,uint256)",
      [
        ethereum.Value.fromAddress(receiver),
        ethereum.Value.fromUnsignedBigInt(netSyDesired),
        ethereum.Value.fromUnsignedBigInt(netPtDesired)
      ]
    );

    return new Contract__mintResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_mint(
    receiver: Address,
    netSyDesired: BigInt,
    netPtDesired: BigInt
  ): ethereum.CallResult<Contract__mintResult> {
    let result = super.tryCall(
      "mint",
      "mint(address,uint256,uint256):(uint256,uint256,uint256)",
      [
        ethereum.Value.fromAddress(receiver),
        ethereum.Value.fromUnsignedBigInt(netSyDesired),
        ethereum.Value.fromUnsignedBigInt(netPtDesired)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Contract__mintResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  nonces(owner: Address): BigInt {
    let result = super.call("nonces", "nonces(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);

    return result[0].toBigInt();
  }

  try_nonces(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("nonces", "nonces(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  observations(param0: BigInt): Contract__observationsResult {
    let result = super.call(
      "observations",
      "observations(uint256):(uint32,uint216,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new Contract__observationsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBoolean()
    );
  }

  try_observations(
    param0: BigInt
  ): ethereum.CallResult<Contract__observationsResult> {
    let result = super.tryCall(
      "observations",
      "observations(uint256):(uint32,uint216,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Contract__observationsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBoolean()
      )
    );
  }

  observe(secondsAgos: Array<BigInt>): Array<BigInt> {
    let result = super.call("observe", "observe(uint32[]):(uint216[])", [
      ethereum.Value.fromUnsignedBigIntArray(secondsAgos)
    ]);

    return result[0].toBigIntArray();
  }

  try_observe(secondsAgos: Array<BigInt>): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall("observe", "observe(uint32[]):(uint216[])", [
      ethereum.Value.fromUnsignedBigIntArray(secondsAgos)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  readState(router: Address): Contract__readStateResultMarketStruct {
    let result = super.call(
      "readState",
      "readState(address):((int256,int256,int256,address,int256,uint256,uint256,uint256,uint256))",
      [ethereum.Value.fromAddress(router)]
    );

    return changetype<Contract__readStateResultMarketStruct>(
      result[0].toTuple()
    );
  }

  try_readState(
    router: Address
  ): ethereum.CallResult<Contract__readStateResultMarketStruct> {
    let result = super.tryCall(
      "readState",
      "readState(address):((int256,int256,int256,address,int256,uint256,uint256,uint256,uint256))",
      [ethereum.Value.fromAddress(router)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Contract__readStateResultMarketStruct>(value[0].toTuple())
    );
  }

  readTokens(): Contract__readTokensResult {
    let result = super.call(
      "readTokens",
      "readTokens():(address,address,address)",
      []
    );

    return new Contract__readTokensResult(
      result[0].toAddress(),
      result[1].toAddress(),
      result[2].toAddress()
    );
  }

  try_readTokens(): ethereum.CallResult<Contract__readTokensResult> {
    let result = super.tryCall(
      "readTokens",
      "readTokens():(address,address,address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Contract__readTokensResult(
        value[0].toAddress(),
        value[1].toAddress(),
        value[2].toAddress()
      )
    );
  }

  redeemRewards(user: Address): Array<BigInt> {
    let result = super.call(
      "redeemRewards",
      "redeemRewards(address):(uint256[])",
      [ethereum.Value.fromAddress(user)]
    );

    return result[0].toBigIntArray();
  }

  try_redeemRewards(user: Address): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "redeemRewards",
      "redeemRewards(address):(uint256[])",
      [ethereum.Value.fromAddress(user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  rewardState(param0: Address): Contract__rewardStateResult {
    let result = super.call(
      "rewardState",
      "rewardState(address):(uint128,uint128)",
      [ethereum.Value.fromAddress(param0)]
    );

    return new Contract__rewardStateResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_rewardState(
    param0: Address
  ): ethereum.CallResult<Contract__rewardStateResult> {
    let result = super.tryCall(
      "rewardState",
      "rewardState(address):(uint128,uint128)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Contract__rewardStateResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  scalarRoot(): BigInt {
    let result = super.call("scalarRoot", "scalarRoot():(int256)", []);

    return result[0].toBigInt();
  }

  try_scalarRoot(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("scalarRoot", "scalarRoot():(int256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  swapExactPtForSy(
    receiver: Address,
    exactPtIn: BigInt,
    data: Bytes
  ): Contract__swapExactPtForSyResult {
    let result = super.call(
      "swapExactPtForSy",
      "swapExactPtForSy(address,uint256,bytes):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(receiver),
        ethereum.Value.fromUnsignedBigInt(exactPtIn),
        ethereum.Value.fromBytes(data)
      ]
    );

    return new Contract__swapExactPtForSyResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_swapExactPtForSy(
    receiver: Address,
    exactPtIn: BigInt,
    data: Bytes
  ): ethereum.CallResult<Contract__swapExactPtForSyResult> {
    let result = super.tryCall(
      "swapExactPtForSy",
      "swapExactPtForSy(address,uint256,bytes):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(receiver),
        ethereum.Value.fromUnsignedBigInt(exactPtIn),
        ethereum.Value.fromBytes(data)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Contract__swapExactPtForSyResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  swapSyForExactPt(
    receiver: Address,
    exactPtOut: BigInt,
    data: Bytes
  ): Contract__swapSyForExactPtResult {
    let result = super.call(
      "swapSyForExactPt",
      "swapSyForExactPt(address,uint256,bytes):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(receiver),
        ethereum.Value.fromUnsignedBigInt(exactPtOut),
        ethereum.Value.fromBytes(data)
      ]
    );

    return new Contract__swapSyForExactPtResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_swapSyForExactPt(
    receiver: Address,
    exactPtOut: BigInt,
    data: Bytes
  ): ethereum.CallResult<Contract__swapSyForExactPtResult> {
    let result = super.tryCall(
      "swapSyForExactPt",
      "swapSyForExactPt(address,uint256,bytes):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(receiver),
        ethereum.Value.fromUnsignedBigInt(exactPtOut),
        ethereum.Value.fromBytes(data)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Contract__swapSyForExactPtResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalActiveSupply(): BigInt {
    let result = super.call(
      "totalActiveSupply",
      "totalActiveSupply():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalActiveSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalActiveSupply",
      "totalActiveSupply():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transfer(to: Address, amount: BigInt): boolean {
    let result = super.call("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(to),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_transfer(to: Address, amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(to),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  transferFrom(from: Address, to: Address, amount: BigInt): boolean {
    let result = super.call(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBoolean();
  }

  try_transferFrom(
    from: Address,
    to: Address,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  userReward(param0: Address, param1: Address): Contract__userRewardResult {
    let result = super.call(
      "userReward",
      "userReward(address,address):(uint128,uint128)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );

    return new Contract__userRewardResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_userReward(
    param0: Address,
    param1: Address
  ): ethereum.CallResult<Contract__userRewardResult> {
    let result = super.tryCall(
      "userReward",
      "userReward(address,address):(uint128,uint128)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Contract__userRewardResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _PT(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _scalarRoot(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _initialAnchor(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _vePendle(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _gaugeController(): Address {
    return this._call.inputValues[4].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class BurnCall extends ethereum.Call {
  get inputs(): BurnCall__Inputs {
    return new BurnCall__Inputs(this);
  }

  get outputs(): BurnCall__Outputs {
    return new BurnCall__Outputs(this);
  }
}

export class BurnCall__Inputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }

  get receiverSy(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get receiverPt(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get netLpToBurn(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class BurnCall__Outputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }

  get netSyOut(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get netPtOut(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class IncreaseObservationsCardinalityNextCall extends ethereum.Call {
  get inputs(): IncreaseObservationsCardinalityNextCall__Inputs {
    return new IncreaseObservationsCardinalityNextCall__Inputs(this);
  }

  get outputs(): IncreaseObservationsCardinalityNextCall__Outputs {
    return new IncreaseObservationsCardinalityNextCall__Outputs(this);
  }
}

export class IncreaseObservationsCardinalityNextCall__Inputs {
  _call: IncreaseObservationsCardinalityNextCall;

  constructor(call: IncreaseObservationsCardinalityNextCall) {
    this._call = call;
  }

  get cardinalityNext(): i32 {
    return this._call.inputValues[0].value.toI32();
  }
}

export class IncreaseObservationsCardinalityNextCall__Outputs {
  _call: IncreaseObservationsCardinalityNextCall;

  constructor(call: IncreaseObservationsCardinalityNextCall) {
    this._call = call;
  }
}

export class MintCall extends ethereum.Call {
  get inputs(): MintCall__Inputs {
    return new MintCall__Inputs(this);
  }

  get outputs(): MintCall__Outputs {
    return new MintCall__Outputs(this);
  }
}

export class MintCall__Inputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get receiver(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get netSyDesired(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get netPtDesired(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class MintCall__Outputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get netLpOut(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get netSyUsed(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }

  get netPtUsed(): BigInt {
    return this._call.outputValues[2].value.toBigInt();
  }
}

export class PermitCall extends ethereum.Call {
  get inputs(): PermitCall__Inputs {
    return new PermitCall__Inputs(this);
  }

  get outputs(): PermitCall__Outputs {
    return new PermitCall__Outputs(this);
  }
}

export class PermitCall__Inputs {
  _call: PermitCall;

  constructor(call: PermitCall) {
    this._call = call;
  }

  get owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get spender(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get deadline(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get v(): i32 {
    return this._call.inputValues[4].value.toI32();
  }

  get r(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }

  get s(): Bytes {
    return this._call.inputValues[6].value.toBytes();
  }
}

export class PermitCall__Outputs {
  _call: PermitCall;

  constructor(call: PermitCall) {
    this._call = call;
  }
}

export class RedeemRewardsCall extends ethereum.Call {
  get inputs(): RedeemRewardsCall__Inputs {
    return new RedeemRewardsCall__Inputs(this);
  }

  get outputs(): RedeemRewardsCall__Outputs {
    return new RedeemRewardsCall__Outputs(this);
  }
}

export class RedeemRewardsCall__Inputs {
  _call: RedeemRewardsCall;

  constructor(call: RedeemRewardsCall) {
    this._call = call;
  }

  get user(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RedeemRewardsCall__Outputs {
  _call: RedeemRewardsCall;

  constructor(call: RedeemRewardsCall) {
    this._call = call;
  }

  get value0(): Array<BigInt> {
    return this._call.outputValues[0].value.toBigIntArray();
  }
}

export class SkimCall extends ethereum.Call {
  get inputs(): SkimCall__Inputs {
    return new SkimCall__Inputs(this);
  }

  get outputs(): SkimCall__Outputs {
    return new SkimCall__Outputs(this);
  }
}

export class SkimCall__Inputs {
  _call: SkimCall;

  constructor(call: SkimCall) {
    this._call = call;
  }
}

export class SkimCall__Outputs {
  _call: SkimCall;

  constructor(call: SkimCall) {
    this._call = call;
  }
}

export class SwapExactPtForSyCall extends ethereum.Call {
  get inputs(): SwapExactPtForSyCall__Inputs {
    return new SwapExactPtForSyCall__Inputs(this);
  }

  get outputs(): SwapExactPtForSyCall__Outputs {
    return new SwapExactPtForSyCall__Outputs(this);
  }
}

export class SwapExactPtForSyCall__Inputs {
  _call: SwapExactPtForSyCall;

  constructor(call: SwapExactPtForSyCall) {
    this._call = call;
  }

  get receiver(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get exactPtIn(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class SwapExactPtForSyCall__Outputs {
  _call: SwapExactPtForSyCall;

  constructor(call: SwapExactPtForSyCall) {
    this._call = call;
  }

  get netSyOut(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get netSyFee(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class SwapSyForExactPtCall extends ethereum.Call {
  get inputs(): SwapSyForExactPtCall__Inputs {
    return new SwapSyForExactPtCall__Inputs(this);
  }

  get outputs(): SwapSyForExactPtCall__Outputs {
    return new SwapSyForExactPtCall__Outputs(this);
  }
}

export class SwapSyForExactPtCall__Inputs {
  _call: SwapSyForExactPtCall;

  constructor(call: SwapSyForExactPtCall) {
    this._call = call;
  }

  get receiver(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get exactPtOut(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class SwapSyForExactPtCall__Outputs {
  _call: SwapSyForExactPtCall;

  constructor(call: SwapSyForExactPtCall) {
    this._call = call;
  }

  get netSyIn(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get netSyFee(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class TransferCall extends ethereum.Call {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}
